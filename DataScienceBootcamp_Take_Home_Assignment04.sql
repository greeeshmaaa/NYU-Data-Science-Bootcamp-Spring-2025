
-- Create and use the database
CREATE DATABASE IF NOT EXISTS store_db;
USE store_db;

-- Create tables
CREATE TABLE CUSTOMERS (
    Customer_id INT PRIMARY KEY,
    First_name VARCHAR(50),
    Last_name VARCHAR(50),
    Address VARCHAR(100)
);

CREATE TABLE ITEMS (
    Item_id INT PRIMARY KEY,
    Item_name VARCHAR(50),
    Price DECIMAL(10, 2),
    Department VARCHAR(50)
);

CREATE TABLE SALES (
    Date DATE,
    Order_id INT,
    Item_id INT,
    Customer_id INT,
    Quantity INT,
    Revenue DECIMAL(10, 2)
);

-- Insert sample data
INSERT INTO CUSTOMERS VALUES
(1, 'John', 'Doe', '123 A St'),
(2, 'Jane', 'Smith', '234 B Ave'),
(3, 'Alice', 'Brown', '345 C Rd'),
(4, 'Bob', 'Johnson', '456 D Blvd'),
(5, 'Charlie', 'Lee', '567 E Ln');

INSERT INTO ITEMS VALUES
(101, 'Item_0', 52.00, 'Electronics'),
(102, 'Item_1', 71.00, 'Books'),
(103, 'Item_2', 61.00, 'Clothing'),
(104, 'Item_3', 45.00, 'Groceries'),
(105, 'Item_4', 21.00, 'Toys');

INSERT INTO SALES VALUES
('2023-03-18', 2001, 102, 1, 2, 142.00),
('2023-03-18', 2001, 104, 1, 1, 45.00),
('2023-01-15', 2002, 105, 2, 3, 63.00),
('2023-01-18', 2003, 101, 3, 2, 104.00),
('2022-06-10', 2004, 101, 4, 1, 52.00),
('2022-09-22', 2005, 104, 5, 2, 90.00),
('2022-11-11', 2006, 103, 2, 3, 183.00);

-- Queries

-- 1. Total orders on 18th March 2023
SELECT COUNT(DISTINCT Order_id) AS total_orders
FROM SALES
WHERE Date = '2023-03-18';

-- 2. Orders on 18th March 2023 by John Doe
SELECT COUNT(DISTINCT s.Order_id) AS john_doe_orders
FROM SALES s
JOIN CUSTOMERS c ON s.Customer_id = c.Customer_id
WHERE s.Date = '2023-03-18'
  AND LOWER(c.First_name) = 'john'
  AND LOWER(c.Last_name) = 'doe';

-- 3. Customers in Jan 2023 and average spend
SELECT 
    COUNT(DISTINCT Customer_id) AS total_customers,
    ROUND(AVG(customer_spend), 2) AS avg_spend
FROM (
    SELECT Customer_id, SUM(Revenue) AS customer_spend
    FROM SALES
    WHERE Date BETWEEN '2023-01-01' AND '2023-01-31'
    GROUP BY Customer_id
) AS spending;

-- 4. Departments with revenue less than $600 in 2022
SELECT i.Department, SUM(s.Revenue) AS total_revenue
FROM SALES s
JOIN ITEMS i ON s.Item_id = i.Item_id
WHERE s.Date BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY i.Department
HAVING SUM(s.Revenue) < 600;

-- 5. Most and least revenue generated by an order
SELECT 
    MAX(order_total) AS max_revenue,
    MIN(order_total) AS min_revenue
FROM (
    SELECT Order_id, SUM(Revenue) AS order_total
    FROM SALES
    GROUP BY Order_id
) AS totals;

-- 6. Orders that were purchased in our most lucrative order
WITH OrderTotals AS (
    SELECT Order_id, SUM(Revenue) AS total
    FROM SALES
    GROUP BY Order_id
),
TopOrder AS (
    SELECT Order_id
    FROM OrderTotals
    ORDER BY total DESC
    LIMIT 1
)
SELECT s.*
FROM SALES s
JOIN TopOrder t ON s.Order_id = t.Order_id;
